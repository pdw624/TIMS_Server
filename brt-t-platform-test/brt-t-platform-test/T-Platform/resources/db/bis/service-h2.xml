<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="Bis">
	<!-- PLATFORM SESSION -->
	<update id="updateSession" parameterType="HashMap">
		MERGE INTO PLF_IT_SESSION(PLF_ID, SESSION_ID, SESSION_NAME, SESSION_IP, REMOTE_TYPE, ELAPSED_TIME,
									IN_PACKET, OUT_PACKET, LOGIN_DT, LOGOUT_DT, LAST_DT)
               KEY (PLF_ID, SESSION_ID)
			SELECT #{PLF_ID} AS PLF_ID,
				   SESSION_ID,
		           SESSION_NAME,
			       '-'	AS SESSION_IP,
			       REMOTE_TYPE,
			       0 	AS ELAPSED_TIME,
		       	   0 	AS IN_PACKET,
		           0 	AS OUT_PACKET,
			       '-'	AS LOGIN_DT,
			       '-'	AS LOGOUT_DT,
				   '-'	AS LAST_DT
			FROM (
				SELECT IMP_ID AS SESSION_ID, BUS_NAME AS SESSION_NAME, 'BUS' REMOTE_TYPE FROM BIS_MT_BUS
				UNION ALL
				SELECT BIT_ID AS SESSION_ID, STATION_NAME1 AS SESSION_NAME, 'STN' REMOTE_TYPE FROM BIS_MT_BIT
			)
	</update>

	<!-- PLATFORM SESSION TO SERVICE SESSION UPDATE -->
	<update id="plf2svcSession" parameterType="HashMap">
	<![CDATA[
		MERGE INTO SVC_DB."plf_it_session"(SESSION_ID, SESSION_NAME, SESSION_IP, REMOTE_TP, ELAPSED_TM, IN_PACKET, OUT_PACKET, LOGIN_DT, LOGOUT_DT)
			KEY (SESSION_ID)
		SELECT SESSION_ID, SESSION_NAME, SESSION_IP, REMOTE_TP, ELAPSED_TM, IN_PACKET, OUT_PACKET, LOGIN_DT, LOGOUT_DT
		FROM PLF_IT_SESSION
	]]>
	</update>

	<!-- 마스터 DB 입력 ############################################################################################# -->
	<insert id="masterImp">
		INSERT INTO BIS_MT_BUS
			SELECT T1.VEHICLE_ID, T1.PLATE_NUMBER, T1.VEHICLE_TYPE,
			T2.TERMINAL_ID, T2.TERMINAL_TYPE
			FROM SVC_DB."bis_mt_vehicle" T1, SVC_DB."bis_mt_terminal" T2
			WHERE T1.VEHICLE_ID = T2.VEHICLE_ID
			AND T1.USE_YN = 'Y'
			AND T2.USE_YN = 'Y'
	</insert>

	<insert id="masterBit">
		INSERT INTO BIS_MT_BIT
			SELECT T1.STATION_ID, T1.STATION_TYPE, T1.STATION_NAME,
				T2.BIT_ID, T2.BIT_TYPE, T1.NODE_ID, T1.LINK_ID
			FROM SVC_DB."bis_mt_station" T1, SVC_DB."bis_mt_bit" T2, SVC_DB."bis_mt_bitstation" T3
			WHERE T1.STATION_ID = T3.STATION_ID
			AND T2.BIT_ID = T3.BIT_ID
			AND T1.USE_YN = 'Y'
			AND T2.USE_YN = 'Y'
			AND T3.USE_YN = 'Y'
	</insert>

	<insert id="masterRoute">
		INSERT INTO BIS_MT_ROUTE
			SELECT ROUTE_ID, ROUTE_NAME, ROUTE_ENAME, ROUTE_TYPE, ROUTE_DISTANCE, RUN_TYPE, REQUEST_TIME
			FROM SVC_DB."bis_mt_route"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterRoutePlan">
		INSERT INTO BIS_MT_ROUTE_PLAN
			SELECT ROUTE_ID, DAY_TYPE, SERVICE_COUNT,
			ST_FIRST_TIME, ST_LAST_TIME, ED_FIRST_TIME, ED_LAST_TIME,
			MIN_INTERVAL, MAX_INTERVAL
			FROM SVC_DB."bis_mt_routeplan"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterNode">
		INSERT INTO BIS_MT_NODE
			SELECT NODE_ID, NODE_NAME, NODE_ENAME, NODE_TYPE, GPS_X, GPS_Y, ENTRY_RECOG_RADS, ADVNC_RECOG_RADS
			FROM SVC_DB."bis_mt_node"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterLink">
		INSERT INTO BIS_MT_LINK
			SELECT LINK_ID, SUBSTRING(LINK_NAME, 0, 30), SUBSTRING(LINK_ENAME, 0, 30),
			LINK_TYPE, FROM_NODE_ID, TO_NODE_ID, LINK_DISTANCE,
			LANE_COUNT, MAX_REST_SPEED, ENTRY_ANGLE, ADVANCE_ANGLE
			FROM SVC_DB."bis_mt_link"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterStation">
		INSERT INTO BIS_MT_STATION
			SELECT STATION_ID, STATION_NAME, STATION_ENAME, STATION_TYPE, NODE_ID, GPS_Y, GPS_X
			FROM SVC_DB."bis_mt_station"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterRouteNode">
		INSERT INTO BIS_MT_ROUTE_NODE
			SELECT ROUTE_ID, NODE_SEQUENCE, NODE_ID, UPDOWN_DIR
			FROM SVC_DB."bis_mt_routenode"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterRouteStation">
		INSERT INTO BIS_MT_ROUTE_STATION
			SELECT ROUTE_ID, STATION_SEQUENCE, STATION_ID, UPDOWN_DIR,
			SUM_DISTANCE, REMAIN_DISTANCE, STAT_DISTANCE, NEXT_DISTANCE
			FROM SVC_DB."bis_mt_routestation"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterRouteLink">
		INSERT INTO BIS_MT_ROUTE_LINK
			SELECT ROUTE_ID, LINK_SEQUENCE, LINK_ID, UPDOWN_DIR
			FROM SVC_DB."bis_mt_routelink"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterLinkVertex">
		INSERT INTO BIS_MT_LINK_VERTEX
			SELECT LINK_ID, VERTEX_SEQUENCE, GPS_Y, GPS_X
			FROM SVC_DB."bis_mt_linkvertex"
			WHERE USE_YN='Y'
	</insert>

	<insert id="masterRouteNodeStation">
		INSERT INTO BIS_MT_ALL_INFO
			SELECT T1.ROUTE_ID, T1.ROUTE_TYPE,
				T1.NODE_SEQ, T1.NODE_ID, T1.NODE_TYPE,
				T2.LINK_SEQ, T2.LINK_ID, T2.LINK_TYPE, T2.LINK_LENGTH,
				T3.STATION_SEQ, T3.STATION_ID, T3.STATION_TYPE, T3.BIT_ID, T3.BIT_TYPE
			FROM (
				SELECT TA1.ROUTE_ID, TA1.ROUTE_TYPE, TA2.NODE_SEQ, TA2.NODE_ID, TA3.NODE_TYPE, TA2 .UPDOWN_DIR
				FROM BIS_MT_ROUTE TA1
				INNER JOIN BIS_MT_ROUTE_NODE TA2 ON TA1.ROUTE_ID = TA2.ROUTE_ID
				INNER JOIN BIS_MT_NODE TA3 ON TA2.NODE_ID = TA3.NODE_ID
			) T1
			LEFT JOIN (
				SELECT TB1.ROUTE_ID, TB1.LINK_SEQ, TB2.LINK_ID, TB2.LINK_TYPE, TB2.LINK_LENGTH
				FROM BIS_MT_ROUTE_LINK TB1
				INNER JOIN BIS_MT_LINK TB2 ON TB1.LINK_ID = TB2.LINK_ID
			) T2 ON T2.ROUTE_ID = T1.ROUTE_ID AND T2.LINK_SEQ = T1.NODE_SEQ-1
			LEFT JOIN (
				SELECT TC1.ROUTE_ID, TC1.STATION_SEQ, TC2.STATION_ID, TC2.STATION_TYPE, TC2.NODE_ID, TC1.UPDOWN_DIR, TC3.BIT_ID, TC3.BIT_TYPE
				FROM BIS_MT_ROUTE_STATION TC1
				INNER JOIN BIS_MT_STATION TC2 ON TC1.STATION_ID = TC2.STATION_ID
				LEFT JOIN BIS_MT_BIT TC3 ON TC2.STATION_ID = TC3.STATION_ID
			) T3 ON T3.ROUTE_ID = T1.ROUTE_ID AND T3.NODE_ID = T1.NODE_ID AND T3.UPDOWN_DIR = T1.UPDOWN_DIR
			ORDER BY T1.ROUTE_ID, T1.NODE_SEQ
	</insert>

	<!-- 버스 이벤트 가공 ###############################################################################-->
	<select id="selectBusEvent" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.HtBusEvent">
		<![CDATA[
		SELECT T1.*
		FROM (
			SELECT GPS_DT		AS gpsDateTime,
				   BUS_ID		AS bitId,
				   ROUTE_ID 	AS routeId,
				   EVENT_CD 	AS eventCode,
				   EVENT_DATA 	AS syncData,
				   EVENT_SEQ 	AS eventSequence,
				   LAT 			AS latitude,
				   LON 			AS longitude,
				   HEADING 		AS heading,
				   STOP_TM 		AS stopTime,
				   SYS_DT 		AS systemDateTime
			FROM BIS_HT_BUS_EVENT
			WHERE GPS_DT >= #{ST_DT} AND GPS_DT < #{ED_DT}
			AND BUS_ID = #{BUS_ID}
			AND ROUTE_ID = #{ROUTE_ID}
			ORDER BY GPS_DT DESC
		) T1 WHERE ROWNUM() = #{LOCATION_SEQ}
		]]>
	</select>

	<insert id="insertBusEvent" parameterType="HashMap">
		INSERT INTO BIS_HT_BUS_EVENT	 (
			GPS_DT, IMP_ID, BUS_ID, ROUTE_ID, LINK_ID, EVENT_CD, EVENT_DATA, EVENT_SEQ, RUN_TYPE,
			LAT, LON, HEADING, SPEED, STOP_TM, SYS_DT
		) VALUES (
			#{GPS_DT},
			#{IMP_ID},
			#{BUS_ID},
			#{ROUTE_ID},
			#{LINK_ID},
			#{EVENT_CD},
			#{EVENT_DATA},
			#{EVENT_SEQ},
			#{RUN_TYPE},
			#{LAT},
			#{LON},
			#{HEADING},
			#{SPEED},
			#{STOP_TM},
			FORMATDATETIME(NOW(), 'yyyyMMddHHmmss')
		)
	</insert>

	<select id="selectLink" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.MtLink">
		SELECT LINK_ID 		AS id,
			LINK_TYPE 		AS type,
			LINK_NAME1 		AS name,
			FROM_NODE_ID	AS fromNodeId,
			TO_NODE_ID 		AS toNodeId,
			LINK_LENGTH 	AS linkLength
		FROM BIS_MT_LINK
		WHERE FROM_NODE_ID = #{ST_NODE_ID}
		AND TO_NODE_ID = #{ED_NODE_ID}
	</select>

	<update id="updateLinkSpeed" parameterType="HashMap">
		MERGE INTO BIS_IT_LINK_SPEED(LINK_ID, SPEED, RUN_TIME, STOP_TIME, UPD_DT)
		KEY (LINK_ID)
			SELECT #{LINK_ID}, #{SPEED}, #{RUN_TIME}, #{STOP_TIME}, #{UPD_DT}
			FROM DUAL
	</update>

	<select id="selectStationEvent" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.TmLocation">
		SELECT STATION_SEQ 	AS sequence,
			STATION_ID 		AS id
		FROM BIS_MT_ALL_INFO
		WHERE ROUTE_ID = #{ROUTE_ID}
		AND NODE_SEQ = #{NODE_SEQ}
	</select>

	<update id="updateBusStationEvent">
		MERGE INTO BIS_IT_BUS_LOCATION(BUS_ID, IMP_ID, ROUTE_ID, NODE_SEQ, NODE_ID,
			STATION_SEQ, STATION_ID, LINK_ID, RUN_TYPE, LAT, LON, GPS_DT, SYS_DT)
		KEY (BUS_ID)
		SELECT #{BUS_ID}, #{IMP_ID}, #{ROUTE_ID}, #{NODE_SEQ}, #{NODE_ID}, #{STATION_SEQ}, #{STATION_ID}, #{LINK_ID}, #{RUN_TYPE}, #{LAT}, #{LON}, #{GPS_DT}, #{SYS_DT}
		FROM DUAL
	</update>

	<update id="updateBusNodeEvent">
		MERGE INTO BIS_IT_BUS_LOCATION(BUS_ID, IMP_ID, ROUTE_ID, NODE_SEQ, NODE_ID, LINK_ID, RUN_TYPE, LAT, LON, GPS_DT, SYS_DT)
		KEY (BUS_ID)
		SELECT #{BUS_ID}, #{IMP_ID}, #{ROUTE_ID}, #{NODE_SEQ}, #{NODE_ID}, #{LINK_ID}, #{RUN_TYPE}, #{LAT}, #{LON}, #{GPS_DT}, #{SYS_DT}
		FROM DUAL
	</update>

	<!-- 돌발 설정 ###############################################################################-->
	<update id="updateBusAlarmEvent">
		MERGE INTO BIS_IT_BUS_LOCATION(BUS_ID, IMP_ID, ROUTE_ID, LAT, LON, GPS_DT, ALM_TYPE, ALM_DT, SYS_DT)
		KEY (BUS_ID)
		SELECT #{BUS_ID}, #{IMP_ID}, #{ROUTE_ID}, #{LAT}, #{LON}, #{GPS_DT}, #{ALM_TYPE}, #{ALM_DT}, #{SYS_DT}
		FROM DUAL
	</update>


	<!-- 돌발 해제 ###############################################################################-->
	<select id="selectBusAlarm" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.ItBusLocation">
		<![CDATA[
		SELECT BUS_ID 	AS busId,
			IMP_ID 		AS impId,
			ROUTE_ID 	AS routeId,
			NODE_SEQ 	AS nodeSeq,
			STATION_SEQ AS stationSequence,
			STATION_ID 	AS stationId,
			LINK_ID 	AS linkId,
			RUN_TYPE 	AS runType,
			LAT 		AS latitude,
			LON 		AS longitude,
			GPS_DT 		AS gpsDateTime,
			ALM_TYPE 	AS alarmType,
			ALM_DT 		AS alarmDateTime,
			SYS_DT 		AS systemDateTime
		FROM BIS_IT_BUS_LOCATION
		WHERE ALM_DT < FORMATDATETIME(DATEADD('SECOND', FN_PARAM_VALUE('BUS_ALARM_SECONDS'), NOW()), 'yyyyMMddHHmmss')
		AND ALM_TYPE <> ''
		]]>
	</select>

	<update id="updateBusAlarmOff">
		UPDATE BIS_IT_BUS_LOCATION SET
			ALM_TYPE = #{ALM_TYPE},
			ALM_DT = #{ALM_DT}
		WHERE BUS_ID = #{BUS_ID}
	</update>


	<!-- 뷰 생성 ###############################################################################-->
	<insert id="createRouteBus">
		<![CDATA[
		CREATE VIEW BIS_VW_ROUTE_BUS AS (
			SELECT T1.ROUTE_ID, T1.ROUTE_TYPE, T1.NODE_SEQ, T1.NODE_ID, T1.NODE_TYPE,
					T1.STATION_SEQ, T1.STATION_ID, T1.STATION_TYPE, T1.BIT_ID, T1.BIT_TYPE,
					T2.BUS_ID, T4.BUS_TYPE, T2.RUN_TYPE, T2.LAT, T2.LON, T3.LINK_LENGTH, T3.JOURNEY_TIME
			FROM BIS_MT_ALL_INFO T1 LEFT JOIN (
				SELECT ROUTE_ID, BUS_ID, NODE_SEQ, STATION_SEQ, STATION_ID, RUN_TYPE, LAT, LON
				FROM BIS_IT_BUS_LOCATION
				WHERE GPS_DT > FORMATDATETIME(DATEADD('SECOND', FN_PARAM_VALUE('BUS_LIVE_SECONDS'), NOW()), 'yyyyMMddHHmmssSS')
			) T2
			ON T1.ROUTE_ID = T2.ROUTE_ID AND T1.NODE_SEQ = T2.NODE_SEQ
			LEFT JOIN BIS_VW_LINK_TIME T3 ON T3.LINK_ID = T1.LINK_ID
			LEFT JOIN BIS_MT_BUS T4 ON T4.BUS_ID = T2.BUS_ID
		)
		]]>
	</insert>

	<insert id="createLinkTime">
		<![CDATA[
		CREATE VIEW BIS_VW_LINK_TIME AS (
			SELECT T3.LINK_ID, T3.LINK_LENGTH, IFNULL(T3.JOURNEY_TIME, (T3.LINK_LENGTH / FN_PARAM_VALUE('BUS_DEFAULT_SPEED')) * 3.6) JOURNEY_TIME,
			NVL2(T3.JOURNEY_TIME, 'PASSED', 'DEFAULT') TIME_TYPE
			FROM (
				SELECT T1.LINK_ID, T1.LINK_LENGTH, JOURNEY_TIME
				FROM BIS_MT_LINK T1
				LEFT JOIN (
					SELECT LINK_ID, RUN_TIME + STOP_TIME AS JOURNEY_TIME
					FROM BIS_IT_LINK_SPEED
					WHERE UPD_DT > FORMATDATETIME(DATEADD('SECOND', FN_PARAM_VALUE('BUS_LIVE_SECONDS'), NOW()), 'yyyyMMddHHmmss')
				)  T2
				ON T1.LINK_ID = T2.LINK_ID
			) T3
			ORDER BY T3.LINK_ID
		)
		]]>
	</insert>

	<insert id="createPredictionTime">
		<![CDATA[
		CREATE VIEW BIS_VW_PRDT_TIME AS (
			SELECT T3.ROUTE_ID, T3.ROUTE_TYPE, T3.NODE_SEQ, T3.NODE_ID, T3.NODE_TYPE,
				   T3.STATION_SEQ, T3.STATION_ID, T3.STATION_TYPE, T3.BIT_ID, T3.BIT_TYPE,
				   T3.BUS_ID, T3.BUS_TYPE, T3.RUN_TYPE, T3.LAT, T3.LON, T3.LINK_LENGTH,
				   CASEWHEN(T3.BUS_ID IS NOT NULL, T3.NODE_SEQ, T3.BUS_SEQ) AS BUS_SEQ,
				   CASEWHEN(T3.BUS_ID IS NOT NULL, 0, T3.RELATIVE_SEQ) AS RELATIVE_SEQ,
				   CASEWHEN(T3.BUS_ID IS NOT NULL, 0, T3.PRDT_TIME) AS PRDT_TIME
			FROM (
				SELECT T2.ROUTE_ID, T2.ROUTE_TYPE,
					T2.NODE_SEQ, T2.NODE_ID, T2.NODE_TYPE,
					T2.STATION_SEQ, T2.STATION_ID, T2.STATION_TYPE,
					T2.BIT_ID, T2.BIT_TYPE,
					T2.BUS_ID, T2.BUS_TYPE, T2.RUN_TYPE,
 					T2.LAT, T2.LON, T2.LINK_LENGTH,
 					ROUND(T2.JOURNEY_TIME, 1) JOURNEY_TIME, T2.BUS_SEQ,
					T2.NODE_SEQ - T2.BUS_SEQ AS RELATIVE_SEQ, ROUND(
						SELECT SUM(JOURNEY_TIME)
						FROM BIS_VW_ROUTE_BUS
						WHERE ROUTE_ID = T2.ROUTE_ID
						AND NODE_SEQ > T2.BUS_SEQ AND NODE_SEQ <= T2.NODE_SEQ, 1) AS PRDT_TIME
				FROM (
					SELECT T1.*, (
						SELECT MAX(NODE_SEQ)
						FROM BIS_VW_ROUTE_BUS
						WHERE ROUTE_ID = T1.ROUTE_ID
						AND NODE_SEQ < T1.NODE_SEQ
						AND BUS_ID IS NOT NULL
					) AS BUS_SEQ
					FROM BIS_VW_ROUTE_BUS T1
				) T2
			)  T3
			ORDER BY T3.ROUTE_ID, T3.NODE_SEQ
		)
		]]>
	</insert>

	<select id="selectRouteBit" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.MtRouteBit">
		SELECT ROUTE_ID 	AS routeId,
			BIT_ID 			AS bitId,
			STATION_SEQ 	AS bitSeq
		FROM BIS_MT_ALL_INFO
		WHERE ROUTE_ID = #{ROUTE_ID}
		AND BIT_ID IS NOT NULL
		ORDER BY STATION_SEQ
	</select>

	<select id="selectRouteBusLocation" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.PrBitService">
		<![CDATA[
		SELECT T1.ROUTE_ID 		AS routeId,
			T1.BUS_ID  			AS busId,
			T1.STATION_ID 		AS stationId,
			T3.ROUTE_TYPE 		AS routeType,
			T3.BUS_TYPE 		AS busType,
			T1.RUN_TYPE 		AS runType,
			T1.STATION_SEQ 		AS busStnSeq,
			CASE
				WHEN #{BIT_SEQ} - T1.STATION_SEQ = 0 THEN '3'
				WHEN #{BIT_SEQ} - T1.STATION_SEQ < 3 THEN '2'
				ELSE '1'
			END AS arrivalType
		FROM BIS_IT_BUS_LOCATION T1 INNER JOIN BIS_VW_PRDT_TIME T3 ON T1.ROUTE_ID = T3.ROUTE_ID AND T1.BUS_ID = T3.BUS_ID
		WHERE T1.ROUTE_ID = #{ROUTE_ID}
		AND T1.STATION_ID IS NOT NULL
		ORDER BY T1.NODE_SEQ;
		]]>
	</select>

	<select id="selectFrontRearBus" parameterType="HashMap" resultType="kr.tracom.platform.bis.domain.PrBusService">
		<![CDATA[
		WITH FR_VIEW AS (
			SELECT ROWNUM AS RNUM, ROUTE_ID, BUS_ID, NODE_SEQ, BUS_NAME, STATION_SEQ, STATION_NAME
			FROM (
				SELECT T1.ROUTE_ID, T1.BUS_ID, T1.NODE_SEQ, T2.BUS_NAME, T1.STATION_SEQ, T3.STATION_NAME1 AS STATION_NAME
				FROM BIS_IT_BUS_LOCATION T1
				INNER JOIN BIS_MT_BUS T2 ON T1.BUS_ID = T2.BUS_ID
				INNER JOIN BIS_MT_STATION T3 ON T1.STATION_ID = T3.STATION_ID
				WHERE T1.ROUTE_ID = #{ROUTE_ID}
				AND T1.GPS_DT > FORMATDATETIME(DATEADD('SECOND', FN_PARAM_VALUE('BUS_LIVE_SECONDS'), NOW()), 'yyyyMMddHHmmssSS')
				ORDER BY T1.NODE_SEQ, T1.BUS_ID
			)
		)
		SELECT T1.ROUTE_ID AS routeId,
			   T1.BUS_ID AS busId,
			   T1.NODE_SEQ AS nodeSeq,
			   T1.STATION_SEQ AS stationSeq,
			   T1.PPRV_ID AS pprvBusId,
			   T1.PREV_ID AS prevBusId,
			   T1.NEXT_ID AS nextBusId,
			   T1.NNXT_ID AS nnxtBusId,
			   T1.PPRV_BUS_NAME AS pprvBusName,
			   T1.PREV_BUS_NAME AS prevBusName,
			   T1.NEXT_BUS_NAME AS nextBusName,
			   T1.NNXT_BUS_NAME AS nnxtBusName,
			   ABS(T2.STATION_SEQ - T1.STATION_SEQ) AS pprvRelSeq,
			   ABS(T3.STATION_SEQ - T1.STATION_SEQ) AS prevRelSeq,
			   ABS(T4.STATION_SEQ - T1.STATION_SEQ) AS nextRelSeq,
			   ABS(T5.STATION_SEQ - T1.STATION_SEQ) AS nnxtRelSeq,
			   T1.PPRV_STN_NAME AS pprvStnName,
			   T1.PREV_STN_NAME AS prevStnName,
			   T1.NEXT_STN_NAME AS nextStnName,
			   T1.NNXT_STN_NAME AS nnxtStnName,
			   NVL((SELECT SUM(LINK_LENGTH)  FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ < T1.NODE_SEQ AND NODE_SEQ >= T2.NODE_SEQ), 0) pprvDist,
			   NVL((SELECT SUM(JOURNEY_TIME) FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ < T1.NODE_SEQ AND NODE_SEQ >= T2.NODE_SEQ), 0) / 60 pprvTime,
			   NVL((SELECT SUM(LINK_LENGTH)  FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ < T1.NODE_SEQ AND NODE_SEQ >= T3.NODE_SEQ), 0) prevDist,
			   NVL((SELECT SUM(JOURNEY_TIME) FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ < T1.NODE_SEQ AND NODE_SEQ >= T3.NODE_SEQ), 0) / 60 prevTime,
			   NVL((SELECT SUM(LINK_LENGTH)  FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ >= T1.NODE_SEQ AND NODE_SEQ < T4.NODE_SEQ), 0) nextDist,
			   NVL((SELECT SUM(JOURNEY_TIME) FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ >= T1.NODE_SEQ AND NODE_SEQ < T4.NODE_SEQ), 0) / 60 nextTime,
			   NVL((SELECT SUM(LINK_LENGTH)  FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ >= T1.NODE_SEQ AND NODE_SEQ < T5.NODE_SEQ), 0) nnxtDist,
			   NVL((SELECT SUM(JOURNEY_TIME) FROM BIS_VW_ROUTE_BUS WHERE ROUTE_ID = T1.ROUTE_ID AND NODE_SEQ >= T1.NODE_SEQ AND NODE_SEQ < T5.NODE_SEQ), 0) / 60 nnxtTime
		FROM (
			SELECT T1.ROUTE_ID, T1.BUS_ID, T1.NODE_SEQ, T1.STATION_SEQ,
				T2.BUS_ID AS PPRV_ID,
				T3.BUS_ID AS PREV_ID,
				T4.BUS_ID AS NEXT_ID,
				T5.BUS_ID AS NNXT_ID,
				T2.BUS_NAME AS PPRV_BUS_NAME,
				T3.BUS_NAME AS PREV_BUS_NAME,
				T4.BUS_NAME AS NEXT_BUS_NAME,
				T5.BUS_NAME AS NNXT_BUS_NAME,
				T2.STATION_NAME AS PPRV_STN_NAME,
				T3.STATION_NAME AS PREV_STN_NAME,
				T4.STATION_NAME AS NEXT_STN_NAME,
				T5.STATION_NAME AS NNXT_STN_NAME
			FROM FR_VIEW T1
			LEFT JOIN FR_VIEW T2 ON T1.RNUM = T2.RNUM + 2
			LEFT JOIN FR_VIEW T3 ON T1.RNUM = T3.RNUM + 1
			LEFT JOIN FR_VIEW T4 ON T1.RNUM = T4.RNUM - 1
			LEFT JOIN FR_VIEW T5 ON T1.RNUM = T5.RNUM - 2
		) T1
		LEFT JOIN BIS_IT_BUS_LOCATION T2 ON T1.ROUTE_ID = T2.ROUTE_ID AND T1.PPRV_ID = T2.BUS_ID
		LEFT JOIN BIS_IT_BUS_LOCATION T3 ON T1.ROUTE_ID = T3.ROUTE_ID AND T1.PREV_ID = T3.BUS_ID
		LEFT JOIN BIS_IT_BUS_LOCATION T4 ON T1.ROUTE_ID = T4.ROUTE_ID AND T1.NEXT_ID = T4.BUS_ID
		LEFT JOIN BIS_IT_BUS_LOCATION T5 ON T1.ROUTE_ID = T5.ROUTE_ID AND T1.NNXT_ID = T5.BUS_ID
		WHERE T1.BUS_ID = #{BUS_ID}
		ORDER BY T1.NODE_SEQ
		]]>
	</select>

	<insert id="insertBusService" parameterType="HashMap">
		INSERT INTO BIS_HT_BUS_SERVICE(SYS_DT, BUS_ID, ROUTE_ID,
			PPRV_BUS_ID, PPRV_BUS_NAME, PPRV_STN_NAME, PPRV_REL_SEQ, PPRV_DIST, PPRV_TIME,
			PREV_BUS_ID, PREV_BUS_NAME, PREV_STN_NAME, PREV_REL_SEQ, PREV_DIST, PREV_TIME,
			NEXT_BUS_ID, NEXT_BUS_NAME, NEXT_STN_NAME, NEXT_REL_SEQ, NEXT_DIST, NEXT_TIME,
			NNXT_BUS_ID, NNXT_BUS_NAME, NNXT_STN_NAME, NNXT_REL_SEQ, NNXT_DIST, NNXT_TIME)
		VALUES ( #{SYS_DT}, #{BUS_ID}, #{ROUTE_ID},
			#{PPRV_BUS_ID}, #{PPRV_BUS_NAME}, #{PPRV_STN_NAME}, #{PPRV_REL_SEQ}, #{PPRV_DIST}, #{PPRV_TIME},
			#{PREV_BUS_ID}, #{PREV_BUS_NAME}, #{PREV_STN_NAME}, #{PREV_REL_SEQ}, #{PREV_DIST}, #{PREV_TIME},
			#{NEXT_BUS_ID}, #{NEXT_BUS_NAME}, #{NEXT_STN_NAME}, #{NEXT_REL_SEQ}, #{NEXT_DIST}, #{NEXT_TIME},
			#{NNXT_BUS_ID}, #{NNXT_BUS_NAME}, #{NNXT_STN_NAME}, #{NNXT_REL_SEQ}, #{NNXT_DIST}, #{NNXT_TIME})
	</insert>


	<insert id="insertBitService" parameterType="HashMap">
		INSERT INTO BIS_HT_BIT_SERVICE(SYS_DT,	BIT_ID, BUS_ID, ROUTE_ID, ROUTE_TYPE, BUS_TYPE,
			ARRIVAL_TYPE, RUN_TYPE, BUS_STN_SEQ)
		VALUES (#{SYS_DT}, #{BIT_ID}, #{BUS_ID}, #{ROUTE_ID}, #{ROUTE_TYPE}, #{BUS_TYPE},
			#{ARRIVAL_TYPE}, #{RUN_TYPE}, #{BUS_STN_SEQ})
	</insert>
</mapper>
